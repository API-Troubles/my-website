exit()
import psutil
psutil.cpu_percent()
psutil.virtual_memory()
get_disk_usage()
psutil.get_disk_usage()
psutil.disk_usage()
psutil.disk_usage("/")
import os
psutil.disk_usage(os.getcwd())
exit()
import psutil
psutil.pids()
psutil.Process(3774)
htop
exit()
import psutil
psutil.pids()
exit
import psutil, os
psutil.disk_usage('/')
psutil.disk_usage(os.getcwd())
exit()
def get_stats_by_pid():
    stats: dict = {}
    for pid in psutil.pids():
        process = psutil.Process(pid)
        stats[f"{pid}"] = {
            "name": process.name(),
            "cpu": process.cpu_percent(),
            "memory": process.memory_info().rss,
            "status": process.status()
        }
    return stats
get_stats_by_pid()
import psutil
get_stats_by_pid()
exit()
import subprocess
nest_cli = subprocess.run(
        ["nest", "resources"],
        capture_output=True, 
        text=True
    )
nest_cli
nest_cli.stdout
sys_vitals = subprocess.run(
        ["top"],
        capture_output=True, 
        text=True
    )
sys_vitals = subprocess.run(
        ["top"],
        capture_output=True, 
        text=True
    )
exit()
nest_cli = subprocess.run(
        ["nest", "resources"],
        capture_output=True, 
        text=True
    )
import subprocess
nest_cli = subprocess.run(
        ["nest", "resources"],
        capture_output=True, 
        text=True
    )
nest_cli
nest_cli.stdout
exit()
import psutil
psutil.Process()
p = psutil.Process()
p
p.memory_full_info()
p.memory_full_info().rss - p.memoru_full_info().uss
p.memory_full_info().rss - p.memory_full_info().uss
p.memory_full_info().shared
psutil.cpu_percent(interval=0.1)
psutil.cpu_percent(interval=6)
psutil.cpu_percent(interval=0.1)
psutil.cpu_percent(interval=None)
psutil.getloadavg()
[x / psutil.cpu_count() * 100 for x in psutil.getloadavg()]
psutil.sensors_temperatures()
psutil.sensors_fans()
psutil.sensors_battery()
psutil.boot_time()
psutils.users()
psutil.users()
exit()
